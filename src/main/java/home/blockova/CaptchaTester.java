/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package home.blockova;

import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Janco1
 */
public class CaptchaTester extends javax.swing.JFrame implements PropertyChangeListener {

    private File[] listOfFiles;
    private PrintWriter pw;
    private int aktualny;
    private int uspesnych;
    private int neuspesnych;
    boolean beziCasovac = false;
    long poslednyCas;
    private int cas;
    private long startPridavanieCas;
    Timer timer = new Timer(0);
    ExecutorService es = Executors.newCachedThreadPool();

    /**
     * Creates new form CaptchaTester
     */
    public CaptchaTester() {
        initComponents();

        File folder = new File("rawCaptchas");
        listOfFiles = folder.listFiles();
        System.out.println("listoffiles size: " + listOfFiles.length);
        aktualny = 0;
        try {
            captchaLabel.setIcon(new ImageIcon(ImageIO.read(listOfFiles[aktualny])));
        } catch (IOException ex) {
            Logger.getLogger(CaptchaTester.class.getName()).log(Level.SEVERE, null, ex);
        }
        timer.addPropertyChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        captchaLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        captchaTextTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        uspesnychLabel = new javax.swing.JLabel();
        neuspesnychLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        stopwatchLabel = new javax.swing.JLabel();
        startPridavanieButton = new javax.swing.JButton();
        resetCasovacButton = new javax.swing.JButton();
        rychlostLabelLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        captchaLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\Janco1\\Documents\\NetBeansProjects\\Blockova\\captcha.axd.jpg")); // NOI18N

        jLabel1.setText("captcha text:");

        captchaTextTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                captchaTextTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("uspesnych:");

        uspesnychLabel.setText("jLabel3");

        neuspesnychLabel.setText("jLabel3");

        jLabel5.setText("neuspesnych:");

        stopwatchLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        stopwatchLabel.setText("00:00:00");

        startPridavanieButton.setText("Štart časovač");
        startPridavanieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPridavanieButtonActionPerformed(evt);
            }
        });

        resetCasovacButton.setText("Reset časovač");
        resetCasovacButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCasovacButtonActionPerformed(evt);
            }
        });

        rychlostLabelLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rychlostLabelLabel.setText("0");

        jLabel11.setText("rýchlosť:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(neuspesnychLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(uspesnychLabel)))
                .addGap(95, 95, 95))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(startPridavanieButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(resetCasovacButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(64, 64, 64)
                            .addComponent(stopwatchLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(rychlostLabelLabel)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(jLabel1)
                            .addGap(27, 27, 27)
                            .addComponent(captchaTextTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(78, 78, 78)
                            .addComponent(captchaLabel))))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(uspesnychLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(neuspesnychLabel))
                .addGap(50, 50, 50)
                .addComponent(captchaLabel)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(captchaTextTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPridavanieButton)
                    .addComponent(resetCasovacButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopwatchLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(rychlostLabelLabel)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void captchaTextTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_captchaTextTextFieldKeyReleased
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            if (!beziCasovac) {
                startPridavanieButtonActionPerformed(null);
            }
            if (captchaTextTextField.getText().equalsIgnoreCase(listOfFiles[aktualny].getName().split("\\.")[0].split("_")[1])) {
                uspesnych++;
            } else {
                neuspesnych++;
            }
            System.out.println("processed " + aktualny + "/" + listOfFiles.length);
            aktualny++;
            uspesnychLabel.setText(Integer.toString(uspesnych));
            neuspesnychLabel.setText(Integer.toString(neuspesnych));
            try {
                captchaLabel.setIcon(new ImageIcon(ImageIO.read(listOfFiles[aktualny])));
            } catch (IOException ex) {
                Logger.getLogger(CaptchaTester.class.getName()).log(Level.SEVERE, null, ex);
            }
            rychlostLabelLabel.setText(Integer.toString(cas / (uspesnych + neuspesnych)));
            captchaTextTextField.setText("");
        }
    }//GEN-LAST:event_captchaTextTextFieldKeyReleased

    private void startPridavanieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPridavanieButtonActionPerformed
        if (!beziCasovac) {
            beziCasovac = true;
            startPridavanieButton.setText("Zastaviť časovač.");
            startPridavanieCas = System.currentTimeMillis();
            timer.startTime = startPridavanieCas;
            timer.stop = false;
            es.execute(timer);
        } else {
            beziCasovac = false;
            startPridavanieButton.setText("Spustiť časovač.");
            timer.stop = true;
            // poslednyCas += System.currentTimeMillis() - startPridavanieCas;
        }
    }//GEN-LAST:event_startPridavanieButtonActionPerformed

    private void resetCasovacButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCasovacButtonActionPerformed
        poslednyCas = 0;
        beziCasovac = false;
        startPridavanieButton.setText("Spustiť časovač.");
        timer.stop = true;
        stopwatchLabel.setText("00:00:00");
    }//GEN-LAST:event_resetCasovacButtonActionPerformed

    public void propertyChange(PropertyChangeEvent evt) {
        if ("medzicas".equals(evt.getPropertyName())) {
            System.out.println("novy medzicas: " + evt.getNewValue());
            if (evt.getNewValue() instanceof Integer) {
                System.out.println("novy medzicas " + evt.getNewValue());
                int medzicas = (Integer) evt.getNewValue();
                poslednyCas += medzicas;
            } else {
                System.out.println("medzicas nie je integer");
            }

        }
        if ("secondAdded".equals(evt.getPropertyName())) {
            // System.out.println("secondAdded property change");
            int hodin = (int) ((System.currentTimeMillis() - startPridavanieCas + poslednyCas) / (1000 * 3600));
            int minut = (int) ((System.currentTimeMillis() - startPridavanieCas + poslednyCas) / (1000 * 60));
            int sekund = (int) ((System.currentTimeMillis() - startPridavanieCas + poslednyCas) / (1000));
            sekund %= 60;
            minut %= 60;

            String hodinString = "" + hodin;
            if (hodin < 10) {
                hodinString = "0" + hodin;
            }
            String minutString = "" + minut;
            if (minut < 10) {
                minutString = "0" + minut;
            }
            String sekundString = "" + sekund;
            if (sekund < 10) {
                sekundString = "0" + sekund;
            }
            cas = sekund + minut * 60 + hodin * 3600;
            stopwatchLabel.setText(hodinString + ":" + minutString + ":" + sekundString);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaptchaTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaptchaTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaptchaTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaptchaTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CaptchaTester().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel captchaLabel;
    private javax.swing.JTextField captchaTextTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel neuspesnychLabel;
    private javax.swing.JButton resetCasovacButton;
    private javax.swing.JLabel rychlostLabelLabel;
    private javax.swing.JButton startPridavanieButton;
    private javax.swing.JLabel stopwatchLabel;
    private javax.swing.JLabel uspesnychLabel;
    // End of variables declaration//GEN-END:variables
}
